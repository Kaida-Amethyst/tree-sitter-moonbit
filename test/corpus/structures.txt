================================================================================
Function
================================================================================

pub func add(x: Int, y: Int) -> Int {
  x + y
}

func id[T](x: T) -> T {
  x
}

func answer() -> Int {
  42
}

func print_i32(self: Int) = "spectest" "print_i32"
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (pub)
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier))))))
        (parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier)))))))
      (retuern_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier)))))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (binary_expression
                (expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))
                (expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))))))))))
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier)))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier)))))))
      (retuern_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier)))))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (qualified_identifier
                (lowercase_identifier))))))))
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (retuern_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier)))))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (atomic_expression
                (literal
                  (integer_literal)))))))))
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier)))))))
      (string_literal)
      (string_literal))))

================================================================================
Struct
================================================================================

struct Empty {}

struct Ref[T] {
  内容: T
}

struct Vector[X] {
  mut data : Array[X]
  mut len : Int
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (struct_definition
      (identifier)))
  (structure_item
    (struct_definition
      (identifier)
      (type_parameters
        (type_identifier
          (identifier)))
      (struct_filed_declaration
        (lowercase_identifier)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier)))))))
  (structure_item
    (struct_definition
      (identifier)
      (type_parameters
        (type_identifier
          (identifier)))
      (struct_filed_declaration
        (mutability)
        (lowercase_identifier)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier))))))))
      (struct_filed_declaration
        (mutability)
        (lowercase_identifier)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier))))))))

================================================================================
Enum
================================================================================

enum Empty {}

enum List[T] {
  Nil
  Cons(T, List[T])
}

enum Two {
  Left
  Right
}

--------------------------------------------------------------------------------

(structure
  (structure_item
    (enum_definition
      (identifier)))
  (structure_item
    (enum_definition
      (identifier)
      (type_parameters
        (type_identifier
          (identifier)))
      (enum_constructor
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier))))
        (type
          (apply_type
            (qualified_type_identifier
              (identifier))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier))))))))))
  (structure_item
    (enum_definition
      (identifier)
      (enum_constructor
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier)))))

================================================================================
Expression
================================================================================

let answer = 42
let binary = 0b1101
let octal = 0o777
let hex = 0xabcd
let sum = answer + binary + octal + hex
--------------------------------------------------------------------------------

(structure
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (integer_literal)))))))
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (integer_literal)))))))
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (integer_literal)))))))
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (atomic_expression
            (literal
              (integer_literal)))))))
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (binary_expression
            (expression
              (simple_expression
                (binary_expression
                  (expression
                    (simple_expression
                      (binary_expression
                        (expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))
                        (expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))))))
                  (expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))
            (expression
              (simple_expression
                (qualified_identifier
                  (lowercase_identifier))))))))))

================================================================================
dot
================================================================================

let x = "hello".print()
let x = "hello".print()

--------------------------------------------------------------------------------

(structure
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (apply_expression
            (simple_expression
              (access_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (string_literal))))
                (accessor
                  (dot_identifier)))))))))
  (structure_item
    (value_definition
      (lowercase_identifier)
      (expression
        (simple_expression
          (apply_expression
            (simple_expression
              (access_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (string_literal))))
                (accessor
                  (dot_identifier))))))))))
