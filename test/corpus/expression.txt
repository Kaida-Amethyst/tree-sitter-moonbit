================================================================================
pipe operator
================================================================================
fn init() { 1 * 5 |> f(5) |> g  }
--------------------------------------------------------------------------------
(structure
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (parameters)
   (block_expression
    (statement_expression
     (expression
      (simple_expression
       (binary_expression
        (expression
         (simple_expression
          (binary_expression
           (expression
            (simple_expression
             (binary_expression
              (expression
               (simple_expression
                (atomic_expression
                 (literal
                  (integer_literal)))))
              (expression
               (simple_expression
                (atomic_expression
                 (literal
                  (integer_literal))))))))
           (expression
            (simple_expression
             (apply_expression
              (simple_expression
               (qualified_identifier
                (lowercase_identifier)))
              (expression
               (simple_expression
                (atomic_expression
                 (literal
                  (integer_literal)))))))))))
        (expression
         (simple_expression
          (qualified_identifier
           (lowercase_identifier))))))))))))
================================================================================
match expression
================================================================================
fn init() {
  match x {
    A => return
    B => return 1
    C => i = i + 1
    D => break
    E => continue
    F => while true {}
  }
}
--------------------------------------------------------------------------------

(structure
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (parameters)
   (block_expression
    (statement_expression
     (expression
      (match_expression
       (simple_expression
        (qualified_identifier
         (lowercase_identifier)))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body
         (return_expression)))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body
         (return_expression
          (expression
           (simple_expression
            (atomic_expression
             (literal
              (integer_literal))))))))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body
         (assign_expression
          (left_value
           (qualified_identifier
            (lowercase_identifier)))
          (expression
           (simple_expression
            (binary_expression
             (expression
              (simple_expression
               (qualified_identifier
                (lowercase_identifier))))
             (expression
              (simple_expression
               (atomic_expression
                (literal
                 (integer_literal)))))))))))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body))
       (case_clause
        (pattern
         (simple_pattern
          (constructor_pattern
           (constructor_expression
            (uppercase_identifier)))))
        (case_clause_body
         (while_expression
          (simple_expression
           (atomic_expression
            (literal
             (boolean_literal))))
          (block_expression)))))))))))
================================================================================
struct construction
================================================================================
fn init() { let a = A::{ ..id, name: "John Doe" } }
--------------------------------------------------------------------------------
(structure
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (parameters)
   (block_expression
    (statement_expression
     (let_expression
      (pattern
       (simple_pattern
        (lowercase_identifier)))
      (expression
       (simple_expression
        (struct_expression
         (qualified_type_identifier
          (identifier
           (uppercase_identifier)))
         (expression
          (simple_expression
           (qualified_identifier
            (lowercase_identifier))))
         (struct_field_expressions
          (labeled_expression
           (lowercase_identifier)
           (expression
            (simple_expression
             (atomic_expression
              (literal
               (string_literal
                (string_fragement
                 (unescaped_string_fragement))))))))))))))))))
================================================================================
loop expression
================================================================================
fn init {
  loop x, 0 {
    a, b => continue c, d
    e, f => g, h
  }
}
--------------------------------------------------------------------------------
(structure
 (structure_item
  (function_definition
   (function_identifier
    (lowercase_identifier))
   (block_expression
    (statement_expression
     (loop_expression
      (simple_expression
       (qualified_identifier
        (lowercase_identifier)))
      (simple_expression
       (atomic_expression
        (literal
         (integer_literal))))
      (matrix_case_clause
       (pattern
        (simple_pattern
         (lowercase_identifier)))
       (pattern
        (simple_pattern
         (lowercase_identifier)))
       (case_clause_body
        (expression
         (simple_expression
          (qualified_identifier
           (lowercase_identifier))))
        (expression
         (simple_expression
          (qualified_identifier
           (lowercase_identifier))))))
      (matrix_case_clause
       (pattern
        (simple_pattern
         (lowercase_identifier)))
       (pattern
        (simple_pattern
         (lowercase_identifier)))
       (ERROR
        (left_value
         (qualified_identifier
          (lowercase_identifier))))
       (case_clause_body
        (expression
         (simple_expression
          (qualified_identifier
           (lowercase_identifier))))))))))))
